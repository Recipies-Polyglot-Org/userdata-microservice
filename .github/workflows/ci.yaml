name: CI

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]
  workflow_dispatch: {}

permissions:
  contents: read
  security-events: write   # required to upload SARIF results

env:
  JAVA_VERSION: '17'
  IMAGE_REPO: ${{ secrets.DOCKERHUB_USERNAME }}/${{ github.event.repository.name }}

jobs:
  # 1) Lint
  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: ${{ env.JAVA_VERSION }}

      - name: Cache Maven
        uses: actions/cache@v4
        with:
          path: ~/.m2/repository
          key: m2-${{ runner.os }}-${{ hashFiles('**/pom.xml') }}
          restore-keys: m2-${{ runner.os }}-

      - name: Spotless (format check)
        run: mvn -B -DskipTests=true spotless:check || true

      - name: Checkstyle (style rules)
        run: mvn -B -DskipTests=true checkstyle:check || true

  # 2) SCA (Dependency vulnerabilities)
  sca:
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - uses: actions/checkout@v4

      # OWASP Dependency-Check (official)
      - name: OWASP Dependency-Check (SCA)
        uses: dependency-check/Dependency-Check_Action@main   # or @main
        env:
          JAVA_HOME: /opt/jdk   # per action docs when combined with setup-java
        with:
          project: ${{ github.repository }}
          path: .
          format: 'SARIF'
          out: 'reports'
          args: >
            --scan . --failOnCVSS 0

      - name: Upload SARIF (SCA)
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: reports/dependency-check-report.sarif


  # 3) SAST (Static analysis)
  sast:
    runs-on: ubuntu-latest
    needs: sca
    steps:
      - uses: actions/checkout@v4

      - name: Semgrep (SAST)
        uses: returntocorp/semgrep-action@v1
        with:
          config: p/owasp-top-ten
          generateSarif: "1"

      - name: Upload SARIF (SAST)
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: semgrep.sarif

  # 4) Build & Unit Tests
  build_test:
    runs-on: ubuntu-latest
    needs: sast
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: ${{ env.JAVA_VERSION }}

      - name: Cache Maven
        uses: actions/cache@v4
        with:
          path: ~/.m2/repository
          key: m2-${{ runner.os }}-${{ hashFiles('**/pom.xml') }}
          restore-keys: m2-${{ runner.os }}-

      - name: Build & Unit tests
        run: mvn -B clean verify

      - name: Archive test reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: surefire-reports
          path: "**/target/surefire-reports/*.xml"

  # 5) Docker build & push
  docker_push:
    runs-on: ubuntu-latest
    needs: build_test
    outputs:
      short_sha: ${{ steps.meta.outputs.short_sha }}
    steps:
      - uses: actions/checkout@v4

      - id: meta
        run: echo "short_sha=${GITHUB_SHA::7}" >> "$GITHUB_OUTPUT"

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build & Push Docker image
        env:
          SHORT_SHA: ${{ steps.meta.outputs.short_sha }}
          IMAGE_NAME: ${{ env.IMAGE_REPO }}
        run: |
          docker build -t "$IMAGE_NAME:sha-$SHORT_SHA" -t "$IMAGE_NAME:latest" .
          docker push "$IMAGE_NAME:sha-$SHORT_SHA"
          docker push "$IMAGE_NAME:latest"


